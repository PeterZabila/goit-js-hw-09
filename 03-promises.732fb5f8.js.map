{"mappings":"AAAA,IAAMA,KAAO,CACXC,OAAQC,SAASC,cAAc,UAGjCH,KAAKC,OAAOG,iBAAiB,SAAUC,UA0BvC,IAAIC,EAAIC,OAAOC,KAAKC,OAEpB,SAASJ,SAASK,GAChBA,EAAEC,eACFC,YAAW,WACT,IAAI,IAAIC,EAAI,EAAGA,EAAIC,OAAOL,MAAOI,GAAK,EAAG,CACzCE,SAAWF,EACXG,cAAcD,SAAUE,GACvBC,MAAK,SAAAC,OAAEC,EAAQD,EAARJ,SAAUM,EAAKF,EAALG,MAChBC,QAAQC,IAAK,uBAAuCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,UAE3DK,OAAM,SAAAP,OAAGC,EAAQD,EAARJ,SAAUM,EAAKF,EAALG,MAClBC,QAAQC,IAAK,sBAAoCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,UAEzD,IAAMJ,GAAKK,MAAMb,QAASD,KAAKC,MAAOI,KAEvCS,MAAMb,OAIT,SAASO,cAAcD,EAAUO,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GAWtC,OATgB,IAAIC,SAAQ,SAACC,EAASC,GACpCpB,YAAW,WACNe,EACDI,EAAQ,CAAChB,SAAAA,EAAUO,MAAAA,IAEnBU,EAAO,CAACjB,SAAAA,EAAUO,MAAAA,MAEnBA","sources":["src/js/03-promises.js"],"sourcesContent":["const refs = {\n  submit: document.querySelector('.form'),\n};\n\nrefs.submit.addEventListener('submit', onSubmit)\n\n\n// function createPromise(position, delay) {\n  \n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n    \n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({position, delay});\n//       } else {\n//         reject({position, delay});\n//       }\n//     }, delay)\n//   });\n// };\n\n// createPromise(2, 1500)\n// .then(({ position, delay }) => {\n//   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// })\n// .catch(({ position, delay }) => {\n//   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// });\n\nlet s = Number(step.value);\n\nfunction onSubmit(e) {\n  e.preventDefault;\n  setTimeout(() => {\n    for(let i = 0; i < amount.value; i += 1) {\n    position = i;\n    createPromise(position, s)\n    .then(({position, delay}) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n    const s = +delay.value + +step.value* i;\n  }\n}, delay.value);\n  \n};\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if(shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay})\n      }\n    }, delay)\n  })\n  return promise;\n}"],"names":["refs","submit","document","querySelector","addEventListener","onSubmit","s","Number","step","value","e","preventDefault","setTimeout","i","amount","position","createPromise","s1","then","param","_$position","_$delay","delay","console","log","concat","catch","shouldResolve","Math","random","Promise","resolve","reject"],"version":3,"file":"03-promises.732fb5f8.js.map"}